{"remainingRequest":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ng2-select\\select\\select-pipes.js","dependencies":[{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ng2-select\\select\\select-pipes.js","mtime":1511438750000},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1614055079483},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"./common\");\nvar HighlightPipe = /*@__PURE__*/ (function () {\n    function HighlightPipe() {\n    }\n    HighlightPipe.prototype.transform = function (value, query) {\n        if (query.length < 1) {\n            return value;\n        }\n        if (query) {\n            var tagRE = new RegExp('<[^<>]*>', 'ig');\n            // get ist of tags\n            var tagList = value.match(tagRE);\n            // Replace tags with token\n            var tmpValue = value.replace(tagRE, '$!$');\n            // Replace search words\n            value = tmpValue.replace(new RegExp(common_1.escapeRegexp(query), 'gi'), '<strong>$&</strong>');\n            // Reinsert HTML\n            for (var i = 0; value.indexOf('$!$') > -1; i++) {\n                value = value.replace('$!$', tagList[i]);\n            }\n        }\n        return value;\n    };\n    HighlightPipe.decorators = [\n        { type: core_1.Pipe, args: [{ name: 'highlight' },] },\n    ];\n    return HighlightPipe;\n}());\nexports.HighlightPipe = HighlightPipe;\nfunction stripTags(input) {\n    var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\n    var commentsAndPhpTags = /<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi;\n    return input.replace(commentsAndPhpTags, '').replace(tags, '');\n}\nexports.stripTags = stripTags;\n\n",{"version":3,"file":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ng2-select\\select\\select-pipes.js.post-build-optimizer.js","sourceRoot":"","sources":["D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ng2-select\\select\\select-pipes.js.pre-build-optimizer.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,IAAI,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACtC,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,aAAa,iBAAG,CAAC;IACjB;IACA,CAAC;IACD,aAAa,CAAC,SAAS,CAAC,SAAS,GAAG,UAAU,KAAK,EAAE,KAAK;QACtD,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACR,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACzC,kBAAkB;YAClB,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjC,0BAA0B;YAC1B,IAAI,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC3C,uBAAuB;YACvB,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,EAAE,qBAAqB,CAAC,CAAC;YAChG,gBAAgB;YAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC7C,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,CAAC;QACL,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC,CAAC;IACF,aAAa,CAAC,UAAU,GAAG;QACvB,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE;KACxD,CAAC;IAGF,MAAM,CAAC,aAAa,CAAC;GACtB,CAAC,CAAC;AACL,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;AACtC,mBAAmB,KAAK;IACpB,IAAI,IAAI,GAAG,gCAAgC,CAAC;IAC5C,IAAI,kBAAkB,GAAG,0CAA0C,CAAC;IACpE,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACnE,CAAC;AACD,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"./common\");\nvar HighlightPipe = (function () {\n    function HighlightPipe() {\n    }\n    HighlightPipe.prototype.transform = function (value, query) {\n        if (query.length < 1) {\n            return value;\n        }\n        if (query) {\n            var tagRE = new RegExp('<[^<>]*>', 'ig');\n            // get ist of tags\n            var tagList = value.match(tagRE);\n            // Replace tags with token\n            var tmpValue = value.replace(tagRE, '$!$');\n            // Replace search words\n            value = tmpValue.replace(new RegExp(common_1.escapeRegexp(query), 'gi'), '<strong>$&</strong>');\n            // Reinsert HTML\n            for (var i = 0; value.indexOf('$!$') > -1; i++) {\n                value = value.replace('$!$', tagList[i]);\n            }\n        }\n        return value;\n    };\n    HighlightPipe.decorators = [\n        { type: core_1.Pipe, args: [{ name: 'highlight' },] },\n    ];\n    /** @nocollapse */\n    HighlightPipe.ctorParameters = function () { return []; };\n    return HighlightPipe;\n}());\nexports.HighlightPipe = HighlightPipe;\nfunction stripTags(input) {\n    var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\n    var commentsAndPhpTags = /<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi;\n    return input.replace(commentsAndPhpTags, '').replace(tags, '');\n}\nexports.stripTags = stripTags;\n"]}]}
{"remainingRequest":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\sortable\\sortable.component.js","dependencies":[{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\sortable\\sortable.component.js","mtime":1614055096974},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1614055079483},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DraggableItemService } from './draggable-item.service';\n/* tslint:disable */\n/* tslint:enable */\nvar SortableComponent = /*@__PURE__*/ (function () {\n    function SortableComponent(transfer) {\n        var _this = this;\n        /** class name for items wrapper */\n        this.wrapperClass = '';\n        /** style object for items wrapper */\n        this.wrapperStyle = {};\n        /** class name for item */\n        this.itemClass = '';\n        /** style object for item */\n        this.itemStyle = {};\n        /** class name for active item */\n        this.itemActiveClass = '';\n        /** style object for active item */\n        this.itemActiveStyle = {};\n        /** class name for placeholder */\n        this.placeholderClass = '';\n        /** style object for placeholder */\n        this.placeholderStyle = {};\n        /** placeholder item which will be shown if collection is empty */\n        this.placeholderItem = '';\n        /** fired on array change (reordering, insert, remove), same as <code>ngModelChange</code>.\n         *  Returns new items collection as a payload.\n         */\n        this.onChange = new EventEmitter();\n        this.showPlaceholder = false;\n        this.activeItem = -1;\n        this.onTouched = Function.prototype;\n        this.onChanged = Function.prototype;\n        this.transfer = transfer;\n        this.currentZoneIndex = SortableComponent.globalZoneIndex++;\n        this.transfer\n            .onCaptureItem()\n            .subscribe(function (item) { return _this.onDrop(item); });\n    }\n    Object.defineProperty(SortableComponent.prototype, \"items\", {\n        get: function () {\n            return this._items;\n        },\n        set: function (value) {\n            this._items = value;\n            var out = this.items.map(function (x) { return x.initData; });\n            this.onChanged(out);\n            this.onChange.emit(out);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortableComponent.prototype.onItemDragstart = function (event, item, i) {\n        this.initDragstartEvent(event);\n        this.onTouched();\n        this.transfer.dragStart({\n            event: event,\n            item: item,\n            i: i,\n            initialIndex: i,\n            lastZoneIndex: this.currentZoneIndex,\n            overZoneIndex: this.currentZoneIndex\n        });\n    };\n    SortableComponent.prototype.onItemDragover = function (event, i) {\n        if (!this.transfer.getItem()) {\n            return;\n        }\n        event.preventDefault();\n        var dragItem = this.transfer.captureItem(this.currentZoneIndex, this.items.length);\n        var newArray = [];\n        if (!this.items.length) {\n            newArray = [dragItem.item];\n        }\n        else if (dragItem.i > i) {\n            newArray = this.items.slice(0, i).concat([\n                dragItem.item\n            ], this.items.slice(i, dragItem.i), this.items.slice(dragItem.i + 1));\n        }\n        else {\n            // this.draggedItem.i < i\n            newArray = this.items.slice(0, dragItem.i).concat(this.items.slice(dragItem.i + 1, i + 1), [\n                dragItem.item\n            ], this.items.slice(i + 1));\n        }\n        this.items = newArray;\n        dragItem.i = i;\n        this.activeItem = i;\n        this.updatePlaceholderState();\n    };\n    SortableComponent.prototype.cancelEvent = function (event) {\n        if (!this.transfer.getItem() || !event) {\n            return;\n        }\n        event.preventDefault();\n    };\n    SortableComponent.prototype.onDrop = function (item) {\n        if (item &&\n            item.overZoneIndex !== this.currentZoneIndex &&\n            item.lastZoneIndex === this.currentZoneIndex) {\n            this.items = this.items.filter(function (x, i) { return i !== item.i; });\n            this.updatePlaceholderState();\n        }\n        this.resetActiveItem(undefined);\n    };\n    SortableComponent.prototype.resetActiveItem = function (event) {\n        this.cancelEvent(event);\n        this.activeItem = -1;\n    };\n    SortableComponent.prototype.registerOnChange = function (callback) {\n        this.onChanged = callback;\n    };\n    SortableComponent.prototype.registerOnTouched = function (callback) {\n        this.onTouched = callback;\n    };\n    SortableComponent.prototype.writeValue = function (value) {\n        var _this = this;\n        if (value) {\n            this.items = value.map(function (x, i) {\n                return ({\n                    id: i,\n                    initData: x,\n                    value: _this.fieldName ? x[_this.fieldName] : x\n                });\n            });\n        }\n        else {\n            this.items = [];\n        }\n        this.updatePlaceholderState();\n    };\n    SortableComponent.prototype.updatePlaceholderState = function () {\n        this.showPlaceholder = !this._items.length;\n    };\n    SortableComponent.prototype.getItemStyle = function (isActive) {\n        return isActive\n            ? Object.assign({}, this.itemStyle, this.itemActiveStyle)\n            : this.itemStyle;\n    };\n    // tslint:disable-next-line\n    SortableComponent.prototype.initDragstartEvent = function (event) {\n        // it is necessary for mozilla\n        // data type should be 'Text' instead of 'text/plain' to keep compatibility\n        // with IE\n        event.dataTransfer.setData('Text', 'placeholder');\n    };\n    SortableComponent.globalZoneIndex = 0;\n    return SortableComponent;\n}());\nexport { SortableComponent };\n\n\n\n",{"version":3,"file":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\sortable\\sortable.component.js.post-build-optimizer.js","sourceRoot":"","sources":["D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\sortable\\sortable.component.js.pre-build-optimizer.js"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DraggableItemService } from './draggable-item.service';\n/* tslint:disable */\n/* tslint:enable */\nvar SortableComponent = (function () {\n    function SortableComponent(transfer) {\n        var _this = this;\n        /** class name for items wrapper */\n        this.wrapperClass = '';\n        /** style object for items wrapper */\n        this.wrapperStyle = {};\n        /** class name for item */\n        this.itemClass = '';\n        /** style object for item */\n        this.itemStyle = {};\n        /** class name for active item */\n        this.itemActiveClass = '';\n        /** style object for active item */\n        this.itemActiveStyle = {};\n        /** class name for placeholder */\n        this.placeholderClass = '';\n        /** style object for placeholder */\n        this.placeholderStyle = {};\n        /** placeholder item which will be shown if collection is empty */\n        this.placeholderItem = '';\n        /** fired on array change (reordering, insert, remove), same as <code>ngModelChange</code>.\n         *  Returns new items collection as a payload.\n         */\n        this.onChange = new EventEmitter();\n        this.showPlaceholder = false;\n        this.activeItem = -1;\n        this.onTouched = Function.prototype;\n        this.onChanged = Function.prototype;\n        this.transfer = transfer;\n        this.currentZoneIndex = SortableComponent.globalZoneIndex++;\n        this.transfer\n            .onCaptureItem()\n            .subscribe(function (item) { return _this.onDrop(item); });\n    }\n    Object.defineProperty(SortableComponent.prototype, \"items\", {\n        get: function () {\n            return this._items;\n        },\n        set: function (value) {\n            this._items = value;\n            var out = this.items.map(function (x) { return x.initData; });\n            this.onChanged(out);\n            this.onChange.emit(out);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortableComponent.prototype.onItemDragstart = function (event, item, i) {\n        this.initDragstartEvent(event);\n        this.onTouched();\n        this.transfer.dragStart({\n            event: event,\n            item: item,\n            i: i,\n            initialIndex: i,\n            lastZoneIndex: this.currentZoneIndex,\n            overZoneIndex: this.currentZoneIndex\n        });\n    };\n    SortableComponent.prototype.onItemDragover = function (event, i) {\n        if (!this.transfer.getItem()) {\n            return;\n        }\n        event.preventDefault();\n        var dragItem = this.transfer.captureItem(this.currentZoneIndex, this.items.length);\n        var newArray = [];\n        if (!this.items.length) {\n            newArray = [dragItem.item];\n        }\n        else if (dragItem.i > i) {\n            newArray = this.items.slice(0, i).concat([\n                dragItem.item\n            ], this.items.slice(i, dragItem.i), this.items.slice(dragItem.i + 1));\n        }\n        else {\n            // this.draggedItem.i < i\n            newArray = this.items.slice(0, dragItem.i).concat(this.items.slice(dragItem.i + 1, i + 1), [\n                dragItem.item\n            ], this.items.slice(i + 1));\n        }\n        this.items = newArray;\n        dragItem.i = i;\n        this.activeItem = i;\n        this.updatePlaceholderState();\n    };\n    SortableComponent.prototype.cancelEvent = function (event) {\n        if (!this.transfer.getItem() || !event) {\n            return;\n        }\n        event.preventDefault();\n    };\n    SortableComponent.prototype.onDrop = function (item) {\n        if (item &&\n            item.overZoneIndex !== this.currentZoneIndex &&\n            item.lastZoneIndex === this.currentZoneIndex) {\n            this.items = this.items.filter(function (x, i) { return i !== item.i; });\n            this.updatePlaceholderState();\n        }\n        this.resetActiveItem(undefined);\n    };\n    SortableComponent.prototype.resetActiveItem = function (event) {\n        this.cancelEvent(event);\n        this.activeItem = -1;\n    };\n    SortableComponent.prototype.registerOnChange = function (callback) {\n        this.onChanged = callback;\n    };\n    SortableComponent.prototype.registerOnTouched = function (callback) {\n        this.onTouched = callback;\n    };\n    SortableComponent.prototype.writeValue = function (value) {\n        var _this = this;\n        if (value) {\n            this.items = value.map(function (x, i) { return ({\n                id: i,\n                initData: x,\n                value: _this.fieldName ? x[_this.fieldName] : x\n            }); });\n        }\n        else {\n            this.items = [];\n        }\n        this.updatePlaceholderState();\n    };\n    SortableComponent.prototype.updatePlaceholderState = function () {\n        this.showPlaceholder = !this._items.length;\n    };\n    SortableComponent.prototype.getItemStyle = function (isActive) {\n        return isActive\n            ? Object.assign({}, this.itemStyle, this.itemActiveStyle)\n            : this.itemStyle;\n    };\n    // tslint:disable-next-line\n    SortableComponent.prototype.initDragstartEvent = function (event) {\n        // it is necessary for mozilla\n        // data type should be 'Text' instead of 'text/plain' to keep compatibility\n        // with IE\n        event.dataTransfer.setData('Text', 'placeholder');\n    };\n    SortableComponent.globalZoneIndex = 0;\n    SortableComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bs-sortable',\n                    exportAs: 'bs-sortable',\n                    template: \"\\n<div\\n    [ngClass]=\\\"wrapperClass\\\"\\n    [ngStyle]=\\\"wrapperStyle\\\"\\n    [ngStyle]=\\\"wrapperStyle\\\"\\n    (dragover)=\\\"cancelEvent($event)\\\"\\n    (dragenter)=\\\"cancelEvent($event)\\\"\\n    (drop)=\\\"resetActiveItem($event)\\\"\\n    (mouseleave)=\\\"resetActiveItem($event)\\\">\\n  <div\\n        *ngIf=\\\"showPlaceholder\\\"\\n        [ngClass]=\\\"placeholderClass\\\"\\n        [ngStyle]=\\\"placeholderStyle\\\"\\n        (dragover)=\\\"onItemDragover($event, 0)\\\"\\n        (dragenter)=\\\"cancelEvent($event)\\\"\\n    >{{placeholderItem}}</div>\\n    <div\\n        *ngFor=\\\"let item of items; let i=index;\\\"\\n        [ngClass]=\\\"[ itemClass, i === activeItem ? itemActiveClass : '' ]\\\"\\n        [ngStyle]=\\\"getItemStyle(i === activeItem)\\\"\\n        draggable=\\\"true\\\"\\n        (dragstart)=\\\"onItemDragstart($event, item, i)\\\"\\n        (dragend)=\\\"resetActiveItem($event)\\\"\\n        (dragover)=\\\"onItemDragover($event, i)\\\"\\n        (dragenter)=\\\"cancelEvent($event)\\\"\\n        aria-dropeffect=\\\"move\\\"\\n        [attr.aria-grabbed]=\\\"i === activeItem\\\"\\n    ><ng-template [ngTemplateOutlet]=\\\"itemTemplate || defItemTemplate\\\"\\n  [ngTemplateOutletContext]=\\\"{item:item, index: i}\\\"></ng-template></div>\\n</div>\\n\\n<ng-template #defItemTemplate let-item=\\\"item\\\">{{item.value}}</ng-template>  \\n\",\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(function () { return SortableComponent; }),\n                            multi: true\n                        }\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    SortableComponent.ctorParameters = function () { return [\n        { type: DraggableItemService, },\n    ]; };\n    SortableComponent.propDecorators = {\n        'fieldName': [{ type: Input },],\n        'wrapperClass': [{ type: Input },],\n        'wrapperStyle': [{ type: Input },],\n        'itemClass': [{ type: Input },],\n        'itemStyle': [{ type: Input },],\n        'itemActiveClass': [{ type: Input },],\n        'itemActiveStyle': [{ type: Input },],\n        'placeholderClass': [{ type: Input },],\n        'placeholderStyle': [{ type: Input },],\n        'placeholderItem': [{ type: Input },],\n        'itemTemplate': [{ type: Input },],\n        'onChange': [{ type: Output },],\n    };\n    return SortableComponent;\n}());\nexport { SortableComponent };\n//# sourceMappingURL=sortable.component.js.map"]}]}
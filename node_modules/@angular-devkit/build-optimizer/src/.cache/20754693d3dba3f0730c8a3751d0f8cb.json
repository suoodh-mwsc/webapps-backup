{"remainingRequest":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\chronos\\duration\\constructor.js","dependencies":[{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\chronos\\duration\\constructor.js","mtime":1614055074739},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1614055079483},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { getLocale } from '../locale/locales';\nimport { isDurationValid } from './valid';\nimport { bubble, daysToMonths, monthsToDays } from './bubble';\nimport { normalizeUnits } from '../units/aliases';\nimport { relativeTime } from './humanize';\nimport { toInt } from '../utils/type-checks';\nvar Duration = /*@__PURE__*/ (function () {\n    function Duration(duration, config) {\n        if (config === void 0) {\n            config = {};\n        }\n        this._data = {};\n        this._locale = getLocale();\n        this._locale = config && config._locale || getLocale();\n        // const normalizedInput = normalizeObjectUnits(duration);\n        var normalizedInput = duration;\n        var years = normalizedInput.year || 0;\n        var quarters = normalizedInput.quarter || 0;\n        var months = normalizedInput.month || 0;\n        var weeks = normalizedInput.week || 0;\n        var days = normalizedInput.day || 0;\n        var hours = normalizedInput.hours || 0;\n        var minutes = normalizedInput.minutes || 0;\n        var seconds = normalizedInput.seconds || 0;\n        var milliseconds = normalizedInput.milliseconds || 0;\n        this._isValid = isDurationValid(normalizedInput);\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1000 +\n            minutes * 60 * 1000 +\n            hours * 1000 * 60 * 60; // using 1000 * 60 * 60\n        // instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n        // this._data = {};\n        // this._locale = getLocale();\n        // this._bubble();\n        return bubble(this);\n    }\n    Duration.prototype.isValid = function () {\n        return this._isValid;\n    };\n    Duration.prototype.humanize = function (withSuffix) {\n        // throw new Error(`TODO: implement`);\n        if (!this.isValid()) {\n            return this.localeData().invalidDate;\n        }\n        var locale = this.localeData();\n        var output = relativeTime(this, !withSuffix, locale);\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n        return locale.postformat(output);\n    };\n    Duration.prototype.localeData = function () {\n        return this._locale;\n    };\n    Duration.prototype.locale = function (localeKey) {\n        if (!localeKey) {\n            return this._locale._abbr;\n        }\n        this._locale = getLocale(localeKey) || this._locale;\n        return this;\n    };\n    Duration.prototype.abs = function () {\n        var mathAbs = Math.abs;\n        var data = this._data;\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.month = mathAbs(data.month);\n        data.year = mathAbs(data.year);\n        return this;\n    };\n    Duration.prototype.as = function (_units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n        var units = normalizeUnits(_units);\n        if (units === 'month' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        }\n        // handle milliseconds separately because of floating point math errors (issue #1867)\n        days = this._days + Math.round(monthsToDays(this._months));\n        switch (units) {\n            case 'week':\n                return days / 7 + milliseconds / 6048e5;\n            case 'day':\n                return days + milliseconds / 864e5;\n            case 'hours':\n                return days * 24 + milliseconds / 36e5;\n            case 'minutes':\n                return days * 1440 + milliseconds / 6e4;\n            case 'seconds':\n                return days * 86400 + milliseconds / 1000;\n            // Math.floor prevents floating point math errors here\n            case 'milliseconds':\n                return Math.floor(days * 864e5) + milliseconds;\n            default:\n                throw new Error(\"Unknown unit \" + units);\n        }\n    };\n    Duration.prototype.valueOf = function () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6);\n    };\n    return Duration;\n}());\nexport { Duration };\nexport function isDuration(obj) {\n    return obj instanceof Duration;\n}\n\n\n\n",{"version":3,"file":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\chronos\\duration\\constructor.js.post-build-optimizer.js","sourceRoot":"","sources":["D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\chronos\\duration\\constructor.js.pre-build-optimizer.js"],"names":[],"mappings":"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","sourcesContent":["import { getLocale } from '../locale/locales';\nimport { isDurationValid } from './valid';\nimport { bubble, daysToMonths, monthsToDays } from './bubble';\nimport { normalizeUnits } from '../units/aliases';\nimport { relativeTime } from './humanize';\nimport { toInt } from '../utils/type-checks';\nvar Duration = (function () {\n    function Duration(duration, config) {\n        if (config === void 0) { config = {}; }\n        this._data = {};\n        this._locale = getLocale();\n        this._locale = config && config._locale || getLocale();\n        // const normalizedInput = normalizeObjectUnits(duration);\n        var normalizedInput = duration;\n        var years = normalizedInput.year || 0;\n        var quarters = normalizedInput.quarter || 0;\n        var months = normalizedInput.month || 0;\n        var weeks = normalizedInput.week || 0;\n        var days = normalizedInput.day || 0;\n        var hours = normalizedInput.hours || 0;\n        var minutes = normalizedInput.minutes || 0;\n        var seconds = normalizedInput.seconds || 0;\n        var milliseconds = normalizedInput.milliseconds || 0;\n        this._isValid = isDurationValid(normalizedInput);\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1000 +\n            minutes * 60 * 1000 +\n            hours * 1000 * 60 * 60; // using 1000 * 60 * 60\n        // instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n        // this._data = {};\n        // this._locale = getLocale();\n        // this._bubble();\n        return bubble(this);\n    }\n    Duration.prototype.isValid = function () {\n        return this._isValid;\n    };\n    Duration.prototype.humanize = function (withSuffix) {\n        // throw new Error(`TODO: implement`);\n        if (!this.isValid()) {\n            return this.localeData().invalidDate;\n        }\n        var locale = this.localeData();\n        var output = relativeTime(this, !withSuffix, locale);\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n        return locale.postformat(output);\n    };\n    Duration.prototype.localeData = function () {\n        return this._locale;\n    };\n    Duration.prototype.locale = function (localeKey) {\n        if (!localeKey) {\n            return this._locale._abbr;\n        }\n        this._locale = getLocale(localeKey) || this._locale;\n        return this;\n    };\n    Duration.prototype.abs = function () {\n        var mathAbs = Math.abs;\n        var data = this._data;\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.month = mathAbs(data.month);\n        data.year = mathAbs(data.year);\n        return this;\n    };\n    Duration.prototype.as = function (_units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n        var units = normalizeUnits(_units);\n        if (units === 'month' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        }\n        // handle milliseconds separately because of floating point math errors (issue #1867)\n        days = this._days + Math.round(monthsToDays(this._months));\n        switch (units) {\n            case 'week':\n                return days / 7 + milliseconds / 6048e5;\n            case 'day':\n                return days + milliseconds / 864e5;\n            case 'hours':\n                return days * 24 + milliseconds / 36e5;\n            case 'minutes':\n                return days * 1440 + milliseconds / 6e4;\n            case 'seconds':\n                return days * 86400 + milliseconds / 1000;\n            // Math.floor prevents floating point math errors here\n            case 'milliseconds':\n                return Math.floor(days * 864e5) + milliseconds;\n            default:\n                throw new Error(\"Unknown unit \" + units);\n        }\n    };\n    Duration.prototype.valueOf = function () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6);\n    };\n    return Duration;\n}());\nexport { Duration };\nexport function isDuration(obj) {\n    return obj instanceof Duration;\n}\n//# sourceMappingURL=constructor.js.map"]}]}
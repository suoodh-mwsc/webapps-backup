{"remainingRequest":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\dropdown\\bs-dropdown-toggle.directive.js","dependencies":[{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\dropdown\\bs-dropdown-toggle.directive.js","mtime":1614055090432},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1614055079483},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, HostBinding, HostListener } from '@angular/core';\nimport { BsDropdownState } from './bs-dropdown.state';\nvar BsDropdownToggleDirective = /*@__PURE__*/ (function () {\n    function BsDropdownToggleDirective(_state, _element) {\n        var _this = this;\n        this._state = _state;\n        this._element = _element;\n        this.isDisabled = null;\n        this._subscriptions = [];\n        // sync is open value with state\n        this._subscriptions.push(this._state.isOpenChange.subscribe(function (value) { return (_this.isOpen = value); }));\n        // populate disabled state\n        this._subscriptions.push(this._state.isDisabledChange.subscribe(function (value) { return (_this.isDisabled = value || null); }));\n    }\n    BsDropdownToggleDirective.prototype.onClick = function () {\n        if (this.isDisabled) {\n            return;\n        }\n        this._state.toggleClick.emit(true);\n    };\n    BsDropdownToggleDirective.prototype.onDocumentClick = function (event) {\n        if (this._state.autoClose &&\n            event.button !== 2 &&\n            !this._element.nativeElement.contains(event.target)) {\n            this._state.toggleClick.emit(false);\n        }\n    };\n    BsDropdownToggleDirective.prototype.onEsc = function () {\n        if (this._state.autoClose) {\n            this._state.toggleClick.emit(false);\n        }\n    };\n    BsDropdownToggleDirective.prototype.ngOnDestroy = function () {\n        for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {\n            var sub = _a[_i];\n            sub.unsubscribe();\n        }\n    };\n    return BsDropdownToggleDirective;\n}());\nexport { BsDropdownToggleDirective };\n\n\n\n",{"version":3,"file":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\dropdown\\bs-dropdown-toggle.directive.js.post-build-optimizer.js","sourceRoot":"","sources":["D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\dropdown\\bs-dropdown-toggle.directive.js.pre-build-optimizer.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AACjF,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,IAAI,yBAAyB,iBAAG,CAAC;IAC7B,mCAAmC,MAAM,EAAE,QAAQ;QAC/C,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,gCAAgC;QAChC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,KAAK,IAAI,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClH,0BAA0B;QAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAU,KAAK,IAAI,MAAM,CAAC,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtI,CAAC;IACD,yBAAyB,CAAC,SAAS,CAAC,OAAO,GAAG;QAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACX,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC;IACF,yBAAyB,CAAC,SAAS,CAAC,eAAe,GAAG,UAAU,KAAK;QACjE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS;YACrB,KAAK,CAAC,MAAM,KAAK,CAAC;YAClB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC;IACL,CAAC,CAAC;IACF,yBAAyB,CAAC,SAAS,CAAC,KAAK,GAAG;QACxC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC;IACL,CAAC,CAAC;IACF,yBAAyB,CAAC,SAAS,CAAC,WAAW,GAAG;QAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,cAAc,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;YAC9D,IAAI,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YACjB,GAAG,CAAC,WAAW,EAAE,CAAC;QACtB,CAAC;IACL,CAAC,CAAC;IAsBF,MAAM,CAAC,yBAAyB,CAAC;GAClC,CAAC,CAAC;AACL,OAAO,EAAE,yBAAyB,EAAE,CAAC;AACrC,wDAAwD","sourcesContent":["import { Directive, ElementRef, HostBinding, HostListener } from '@angular/core';\nimport { BsDropdownState } from './bs-dropdown.state';\nvar BsDropdownToggleDirective = (function () {\n    function BsDropdownToggleDirective(_state, _element) {\n        var _this = this;\n        this._state = _state;\n        this._element = _element;\n        this.isDisabled = null;\n        this._subscriptions = [];\n        // sync is open value with state\n        this._subscriptions.push(this._state.isOpenChange.subscribe(function (value) { return (_this.isOpen = value); }));\n        // populate disabled state\n        this._subscriptions.push(this._state.isDisabledChange.subscribe(function (value) { return (_this.isDisabled = value || null); }));\n    }\n    BsDropdownToggleDirective.prototype.onClick = function () {\n        if (this.isDisabled) {\n            return;\n        }\n        this._state.toggleClick.emit(true);\n    };\n    BsDropdownToggleDirective.prototype.onDocumentClick = function (event) {\n        if (this._state.autoClose &&\n            event.button !== 2 &&\n            !this._element.nativeElement.contains(event.target)) {\n            this._state.toggleClick.emit(false);\n        }\n    };\n    BsDropdownToggleDirective.prototype.onEsc = function () {\n        if (this._state.autoClose) {\n            this._state.toggleClick.emit(false);\n        }\n    };\n    BsDropdownToggleDirective.prototype.ngOnDestroy = function () {\n        for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {\n            var sub = _a[_i];\n            sub.unsubscribe();\n        }\n    };\n    BsDropdownToggleDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[bsDropdownToggle],[dropdownToggle]',\n                    exportAs: 'bs-dropdown-toggle',\n                    host: {\n                        '[attr.aria-haspopup]': 'true'\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    BsDropdownToggleDirective.ctorParameters = function () { return [\n        { type: BsDropdownState, },\n        { type: ElementRef, },\n    ]; };\n    BsDropdownToggleDirective.propDecorators = {\n        'isDisabled': [{ type: HostBinding, args: ['attr.disabled',] },],\n        'isOpen': [{ type: HostBinding, args: ['attr.aria-expanded',] },],\n        'onClick': [{ type: HostListener, args: ['click', [],] },],\n        'onDocumentClick': [{ type: HostListener, args: ['document:click', ['$event'],] },],\n        'onEsc': [{ type: HostListener, args: ['keyup.esc',] },],\n    };\n    return BsDropdownToggleDirective;\n}());\nexport { BsDropdownToggleDirective };\n//# sourceMappingURL=bs-dropdown-toggle.directive.js.map"]}]}
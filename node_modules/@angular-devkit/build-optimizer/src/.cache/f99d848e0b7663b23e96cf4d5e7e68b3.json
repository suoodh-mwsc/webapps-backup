{"remainingRequest":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\carousel\\carousel.component.js","dependencies":[{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\carousel\\carousel.component.js","mtime":1614055073243},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1614055079483},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// tslint:disable:max-file-line-count\n/***\n * pause (not yet supported) (?string='hover') - event group name which pauses\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\n * carousel will not react to keyboard events\n * note: swiping not yet supported\n */\n/****\n * Problems:\n * 1) if we set an active slide via model changes, .active class remains on a\n * current slide.\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\n * 3) if first or last slide is active and noWrap is true, there should be\n * \"disabled\" class on the nav buttons.\n * 4) default interval should be equal 5000\n */\nimport { Component, EventEmitter, Input, NgZone, Output } from '@angular/core';\nimport { isBs3, LinkedList } from '../utils/index';\nimport { CarouselConfig } from './carousel.config';\nexport var Direction = /*@__PURE__*/ (function (Direction) {\n    Direction[Direction[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    Direction[Direction[\"NEXT\"] = 1] = \"NEXT\";\n    Direction[Direction[\"PREV\"] = 2] = \"PREV\";\n    return Direction;\n})({});\n/**\n * Base element to create carousel\n */\nvar CarouselComponent = /*@__PURE__*/ (function () {\n    function CarouselComponent(config, ngZone) {\n        this.ngZone = ngZone;\n        /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n        this.activeSlideChange = new EventEmitter(false);\n        this._slides = new LinkedList();\n        this.destroyed = false;\n        Object.assign(this, config);\n    }\n    Object.defineProperty(CarouselComponent.prototype, \"activeSlide\", {\n        get: function () {\n            return this._currentActiveSlide;\n        },\n        /** Index of currently displayed slide(started for 0) */\n        set: function (index) {\n            if (this._slides.length && index !== this._currentActiveSlide) {\n                this._select(index);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CarouselComponent.prototype, \"interval\", {\n        /**\n         * Delay of item cycling in milliseconds. If false, carousel won't cycle\n         * automatically.\n         */\n        get: function () {\n            return this._interval;\n        },\n        set: function (value) {\n            this._interval = value;\n            this.restartTimer();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CarouselComponent.prototype, \"slides\", {\n        get: function () {\n            return this._slides.toArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CarouselComponent.prototype, \"isBs4\", {\n        get: function () {\n            return !isBs3();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CarouselComponent.prototype.ngOnDestroy = function () {\n        this.destroyed = true;\n    };\n    /**\n     * Adds new slide. If this slide is first in collection - set it as active\n     * and starts auto changing\n     * @param slide\n     */\n    CarouselComponent.prototype.addSlide = function (slide) {\n        this._slides.add(slide);\n        if (this._slides.length === 1) {\n            this._currentActiveSlide = void 0;\n            this.activeSlide = 0;\n            this.play();\n        }\n    };\n    /**\n     * Removes specified slide. If this slide is active - will roll to another\n     * slide\n     * @param slide\n     */\n    CarouselComponent.prototype.removeSlide = function (slide) {\n        var _this = this;\n        var remIndex = this._slides.indexOf(slide);\n        if (this._currentActiveSlide === remIndex) {\n            // removing of active slide\n            var nextSlideIndex_1 = void 0;\n            if (this._slides.length > 1) {\n                // if this slide last - will roll to first slide, if noWrap flag is\n                // FALSE or to previous, if noWrap is TRUE in case, if this slide in\n                // middle of collection, index of next slide is same to removed\n                nextSlideIndex_1 = !this.isLast(remIndex)\n                    ? remIndex\n                    : this.noWrap ? remIndex - 1 : 0;\n            }\n            this._slides.remove(remIndex);\n            // prevents exception with changing some value after checking\n            setTimeout(function () {\n                _this._select(nextSlideIndex_1);\n            }, 0);\n        }\n        else {\n            this._slides.remove(remIndex);\n            var currentSlideIndex_1 = this.getCurrentSlideIndex();\n            setTimeout(function () {\n                // after removing, need to actualize index of current active slide\n                _this._currentActiveSlide = currentSlideIndex_1;\n                _this.activeSlideChange.emit(_this._currentActiveSlide);\n            }, 0);\n        }\n    };\n    /**\n     * Rolling to next slide\n     * @param force: {boolean} if true - will ignore noWrap flag\n     */\n    CarouselComponent.prototype.nextSlide = function (force) {\n        if (force === void 0) {\n            force = false;\n        }\n        this.activeSlide = this.findNextSlideIndex(Direction.NEXT, force);\n    };\n    /**\n     * Rolling to previous slide\n     * @param force: {boolean} if true - will ignore noWrap flag\n     */\n    CarouselComponent.prototype.previousSlide = function (force) {\n        if (force === void 0) {\n            force = false;\n        }\n        this.activeSlide = this.findNextSlideIndex(Direction.PREV, force);\n    };\n    /**\n     * Rolling to specified slide\n     * @param index: {number} index of slide, which must be shown\n     */\n    CarouselComponent.prototype.selectSlide = function (index) {\n        this.activeSlide = index;\n    };\n    /**\n     * Starts a auto changing of slides\n     */\n    CarouselComponent.prototype.play = function () {\n        if (!this.isPlaying) {\n            this.isPlaying = true;\n            this.restartTimer();\n        }\n    };\n    /**\n     * Stops a auto changing of slides\n     */\n    CarouselComponent.prototype.pause = function () {\n        if (!this.noPause) {\n            this.isPlaying = false;\n            this.resetTimer();\n        }\n    };\n    /**\n     * Finds and returns index of currently displayed slide\n     * @returns {number}\n     */\n    CarouselComponent.prototype.getCurrentSlideIndex = function () {\n        return this._slides.findIndex(function (slide) { return slide.active; });\n    };\n    /**\n     * Defines, whether the specified index is last in collection\n     * @param index\n     * @returns {boolean}\n     */\n    CarouselComponent.prototype.isLast = function (index) {\n        return index + 1 >= this._slides.length;\n    };\n    /**\n     * Defines next slide index, depending of direction\n     * @param direction: Direction(UNKNOWN|PREV|NEXT)\n     * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n     *   return undefined if next slide require wrapping\n     * @returns {any}\n     */\n    CarouselComponent.prototype.findNextSlideIndex = function (direction, force) {\n        var nextSlideIndex = 0;\n        if (!force &&\n            (this.isLast(this.activeSlide) &&\n                direction !== Direction.PREV &&\n                this.noWrap)) {\n            return void 0;\n        }\n        switch (direction) {\n            case Direction.NEXT:\n                // if this is last slide, not force, looping is disabled\n                // and need to going forward - select current slide, as a next\n                nextSlideIndex = !this.isLast(this._currentActiveSlide)\n                    ? this._currentActiveSlide + 1\n                    : !force && this.noWrap ? this._currentActiveSlide : 0;\n                break;\n            case Direction.PREV:\n                // if this is first slide, not force, looping is disabled\n                // and need to going backward - select current slide, as a next\n                nextSlideIndex =\n                    this._currentActiveSlide > 0\n                        ? this._currentActiveSlide - 1\n                        : !force && this.noWrap\n                            ? this._currentActiveSlide\n                            : this._slides.length - 1;\n                break;\n            default:\n                throw new Error('Unknown direction');\n        }\n        return nextSlideIndex;\n    };\n    /**\n     * Sets a slide, which specified through index, as active\n     * @param index\n     * @private\n     */\n    CarouselComponent.prototype._select = function (index) {\n        if (isNaN(index)) {\n            this.pause();\n            return;\n        }\n        var currentSlide = this._slides.get(this._currentActiveSlide);\n        if (currentSlide) {\n            currentSlide.active = false;\n        }\n        var nextSlide = this._slides.get(index);\n        if (nextSlide) {\n            this._currentActiveSlide = index;\n            nextSlide.active = true;\n            this.activeSlide = index;\n            this.activeSlideChange.emit(index);\n        }\n    };\n    /**\n     * Starts loop of auto changing of slides\n     */\n    CarouselComponent.prototype.restartTimer = function () {\n        var _this = this;\n        this.resetTimer();\n        var interval = +this.interval;\n        if (!isNaN(interval) && interval > 0) {\n            this.currentInterval = this.ngZone.runOutsideAngular(function () {\n                return setInterval(function () {\n                    var nInterval = +_this.interval;\n                    _this.ngZone.run(function () {\n                        if (_this.isPlaying &&\n                            !isNaN(_this.interval) &&\n                            nInterval > 0 &&\n                            _this.slides.length) {\n                            _this.nextSlide();\n                        }\n                        else {\n                            _this.pause();\n                        }\n                    });\n                }, interval);\n            });\n        }\n    };\n    /**\n     * Stops loop of auto changing of slides\n     */\n    CarouselComponent.prototype.resetTimer = function () {\n        if (this.currentInterval) {\n            clearInterval(this.currentInterval);\n            this.currentInterval = void 0;\n        }\n    };\n    return CarouselComponent;\n}());\nexport { CarouselComponent };\n\n\n\n",{"version":3,"file":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\carousel\\carousel.component.js.post-build-optimizer.js","sourceRoot":"","sources":["D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\carousel\\carousel.component.js.pre-build-optimizer.js"],"names":[],"mappings":"AAAA,qCAAqC;AACrC;;;;;;GAMG;AACH;;;;;;;;GAQG;AACH,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAC/E,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AACnD,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,MAAM,CAAC,IAAI,SAAS,iBACpB,CAAC,UAAU,SAAS;IAChB,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IAChD,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;IAC1C,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;WAHnC,SAAS;CAInB,CAAC,IAA+B,AALb,CAAC;AAMrB;;GAEG;AACH,IAAI,iBAAiB,iBAAG,CAAC;IACrB,2BAA2B,MAAM,EAAE,MAAM;QACrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,4GAA4G;QAC5G,IAAI,CAAC,iBAAiB,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,GAAG,IAAI,UAAU,EAAE,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAChC,CAAC;IACD,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,SAAS,EAAE,aAAa,EAAE;QAC9D,GAAG,EAAE;YACD,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC;QACpC,CAAC;QACD,wDAAwD;QACxD,GAAG,EAAE,UAAU,KAAK;YAChB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,KAAK,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACxB,CAAC;QACL,CAAC;QACD,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,IAAI;KACrB,CAAC,CAAC;IACH,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,SAAS,EAAE,UAAU,EAAE;QAC3D;;;WAGG;QACH,GAAG,EAAE;YACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;QACD,GAAG,EAAE,UAAU,KAAK;YAChB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;QACD,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,IAAI;KACrB,CAAC,CAAC;IACH,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE;QACzD,GAAG,EAAE;YACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAClC,CAAC;QACD,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,IAAI;KACrB,CAAC,CAAC;IACH,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,SAAS,EAAE,OAAO,EAAE;QACxD,GAAG,EAAE;YACD,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;QACpB,CAAC;QACD,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,IAAI;KACrB,CAAC,CAAC;IACH,iBAAiB,CAAC,SAAS,CAAC,WAAW,GAAG;QACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC,CAAC;IACF;;;;OAIG;IACH,iBAAiB,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAU,KAAK;QAClD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC;IACL,CAAC,CAAC;IACF;;;;OAIG;IACH,iBAAiB,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU,KAAK;QACrD,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,KAAK,QAAQ,CAAC,CAAC,CAAC;YACxC,2BAA2B;YAC3B,IAAI,gBAAgB,GAAG,KAAK,CAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC1B,mEAAmE;gBACnE,oEAAoE;gBACpE,+DAA+D;gBAC/D,gBAAgB,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;oBACrC,CAAC,CAAC,QAAQ;oBACV,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC9B,6DAA6D;YAC7D,UAAU,CAAC;gBACP,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YACpC,CAAC,EAAE,CAAC,CAAC,CAAC;QACV,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC9B,IAAI,mBAAmB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;YACtD,UAAU,CAAC;gBACP,kEAAkE;gBAClE,KAAK,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;gBAChD,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC5D,CAAC,EAAE,CAAC,CAAC,CAAC;QACV,CAAC;IACL,CAAC,CAAC;IACF;;;OAGG;IACH,iBAAiB,CAAC,SAAS,CAAC,SAAS,GAAG,UAAU,KAAK;QACnD,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;YAAC,KAAK,GAAG,KAAK,CAAC;QAAC,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACtE,CAAC,CAAC;IACF;;;OAGG;IACH,iBAAiB,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,KAAK;QACvD,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;YAAC,KAAK,GAAG,KAAK,CAAC;QAAC,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACtE,CAAC,CAAC;IACF;;;OAGG;IACH,iBAAiB,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU,KAAK;QACrD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7B,CAAC,CAAC;IACF;;OAEG;IACH,iBAAiB,CAAC,SAAS,CAAC,IAAI,GAAG;QAC/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;IACL,CAAC,CAAC;IACF;;OAEG;IACH,iBAAiB,CAAC,SAAS,CAAC,KAAK,GAAG;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,UAAU,EAAE,CAAC;QACtB,CAAC;IACL,CAAC,CAAC;IACF;;;OAGG;IACH,iBAAiB,CAAC,SAAS,CAAC,oBAAoB,GAAG;QAC/C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC;IACF;;;;OAIG;IACH,iBAAiB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,KAAK;QAChD,MAAM,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC5C,CAAC,CAAC;IACF;;;;;;OAMG;IACH,iBAAiB,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAU,SAAS,EAAE,KAAK;QACvE,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,EAAE,CAAC,CAAC,CAAC,KAAK;YACN,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;gBAC1B,SAAS,KAAK,SAAS,CAAC,IAAI;gBAC5B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC;QACD,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAChB,KAAK,SAAS,CAAC,IAAI;gBACf,wDAAwD;gBACxD,8DAA8D;gBAC9D,cAAc,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC;oBACnD,CAAC,CAAC,IAAI,CAAC,mBAAmB,GAAG,CAAC;oBAC9B,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3D,KAAK,CAAC;YACV,KAAK,SAAS,CAAC,IAAI;gBACf,yDAAyD;gBACzD,+DAA+D;gBAC/D,cAAc;oBACV,IAAI,CAAC,mBAAmB,GAAG,CAAC;wBACxB,CAAC,CAAC,IAAI,CAAC,mBAAmB,GAAG,CAAC;wBAC9B,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM;4BACnB,CAAC,CAAC,IAAI,CAAC,mBAAmB;4BAC1B,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;gBACtC,KAAK,CAAC;YACV;gBACI,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC7C,CAAC;QACD,MAAM,CAAC,cAAc,CAAC;IAC1B,CAAC,CAAC;IACF;;;;OAIG;IACH,iBAAiB,CAAC,SAAS,CAAC,OAAO,GAAG,UAAU,KAAK;QACjD,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,MAAM,CAAC;QACX,CAAC;QACD,IAAI,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACf,YAAY,CAAC,MAAM,GAAG,KAAK,CAAC;QAChC,CAAC;QACD,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;YACjC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;IACL,CAAC,CAAC;IACF;;OAEG;IACH,iBAAiB,CAAC,SAAS,CAAC,YAAY,GAAG;QACvC,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC9B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;gBACjD,MAAM,CAAC,WAAW,CAAC;oBACf,IAAI,SAAS,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC;oBAChC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC;wBACb,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS;4BACf,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;4BACtB,SAAS,GAAG,CAAC;4BACb,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;4BACtB,KAAK,CAAC,SAAS,EAAE,CAAC;wBACtB,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,KAAK,CAAC,KAAK,EAAE,CAAC;wBAClB,CAAC;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC,EAAE,QAAQ,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC,CAAC;IACF;;OAEG;IACH,iBAAiB,CAAC,SAAS,CAAC,UAAU,GAAG;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACvB,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACpC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC;QAClC,CAAC;IACL,CAAC,CAAC;IAoBF,MAAM,CAAC,iBAAiB,CAAC;GAC1B,CAAC,CAAC;AACL,OAAO,EAAE,iBAAiB,EAAE,CAAC;AAC7B,8CAA8C","sourcesContent":["// tslint:disable:max-file-line-count\n/***\n * pause (not yet supported) (?string='hover') - event group name which pauses\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\n * carousel will not react to keyboard events\n * note: swiping not yet supported\n */\n/****\n * Problems:\n * 1) if we set an active slide via model changes, .active class remains on a\n * current slide.\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\n * 3) if first or last slide is active and noWrap is true, there should be\n * \"disabled\" class on the nav buttons.\n * 4) default interval should be equal 5000\n */\nimport { Component, EventEmitter, Input, NgZone, Output } from '@angular/core';\nimport { isBs3, LinkedList } from '../utils/index';\nimport { CarouselConfig } from './carousel.config';\nexport var Direction;\n(function (Direction) {\n    Direction[Direction[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    Direction[Direction[\"NEXT\"] = 1] = \"NEXT\";\n    Direction[Direction[\"PREV\"] = 2] = \"PREV\";\n})(Direction || (Direction = {}));\n/**\n * Base element to create carousel\n */\nvar CarouselComponent = (function () {\n    function CarouselComponent(config, ngZone) {\n        this.ngZone = ngZone;\n        /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n        this.activeSlideChange = new EventEmitter(false);\n        this._slides = new LinkedList();\n        this.destroyed = false;\n        Object.assign(this, config);\n    }\n    Object.defineProperty(CarouselComponent.prototype, \"activeSlide\", {\n        get: function () {\n            return this._currentActiveSlide;\n        },\n        /** Index of currently displayed slide(started for 0) */\n        set: function (index) {\n            if (this._slides.length && index !== this._currentActiveSlide) {\n                this._select(index);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CarouselComponent.prototype, \"interval\", {\n        /**\n         * Delay of item cycling in milliseconds. If false, carousel won't cycle\n         * automatically.\n         */\n        get: function () {\n            return this._interval;\n        },\n        set: function (value) {\n            this._interval = value;\n            this.restartTimer();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CarouselComponent.prototype, \"slides\", {\n        get: function () {\n            return this._slides.toArray();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CarouselComponent.prototype, \"isBs4\", {\n        get: function () {\n            return !isBs3();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CarouselComponent.prototype.ngOnDestroy = function () {\n        this.destroyed = true;\n    };\n    /**\n     * Adds new slide. If this slide is first in collection - set it as active\n     * and starts auto changing\n     * @param slide\n     */\n    CarouselComponent.prototype.addSlide = function (slide) {\n        this._slides.add(slide);\n        if (this._slides.length === 1) {\n            this._currentActiveSlide = void 0;\n            this.activeSlide = 0;\n            this.play();\n        }\n    };\n    /**\n     * Removes specified slide. If this slide is active - will roll to another\n     * slide\n     * @param slide\n     */\n    CarouselComponent.prototype.removeSlide = function (slide) {\n        var _this = this;\n        var remIndex = this._slides.indexOf(slide);\n        if (this._currentActiveSlide === remIndex) {\n            // removing of active slide\n            var nextSlideIndex_1 = void 0;\n            if (this._slides.length > 1) {\n                // if this slide last - will roll to first slide, if noWrap flag is\n                // FALSE or to previous, if noWrap is TRUE in case, if this slide in\n                // middle of collection, index of next slide is same to removed\n                nextSlideIndex_1 = !this.isLast(remIndex)\n                    ? remIndex\n                    : this.noWrap ? remIndex - 1 : 0;\n            }\n            this._slides.remove(remIndex);\n            // prevents exception with changing some value after checking\n            setTimeout(function () {\n                _this._select(nextSlideIndex_1);\n            }, 0);\n        }\n        else {\n            this._slides.remove(remIndex);\n            var currentSlideIndex_1 = this.getCurrentSlideIndex();\n            setTimeout(function () {\n                // after removing, need to actualize index of current active slide\n                _this._currentActiveSlide = currentSlideIndex_1;\n                _this.activeSlideChange.emit(_this._currentActiveSlide);\n            }, 0);\n        }\n    };\n    /**\n     * Rolling to next slide\n     * @param force: {boolean} if true - will ignore noWrap flag\n     */\n    CarouselComponent.prototype.nextSlide = function (force) {\n        if (force === void 0) { force = false; }\n        this.activeSlide = this.findNextSlideIndex(Direction.NEXT, force);\n    };\n    /**\n     * Rolling to previous slide\n     * @param force: {boolean} if true - will ignore noWrap flag\n     */\n    CarouselComponent.prototype.previousSlide = function (force) {\n        if (force === void 0) { force = false; }\n        this.activeSlide = this.findNextSlideIndex(Direction.PREV, force);\n    };\n    /**\n     * Rolling to specified slide\n     * @param index: {number} index of slide, which must be shown\n     */\n    CarouselComponent.prototype.selectSlide = function (index) {\n        this.activeSlide = index;\n    };\n    /**\n     * Starts a auto changing of slides\n     */\n    CarouselComponent.prototype.play = function () {\n        if (!this.isPlaying) {\n            this.isPlaying = true;\n            this.restartTimer();\n        }\n    };\n    /**\n     * Stops a auto changing of slides\n     */\n    CarouselComponent.prototype.pause = function () {\n        if (!this.noPause) {\n            this.isPlaying = false;\n            this.resetTimer();\n        }\n    };\n    /**\n     * Finds and returns index of currently displayed slide\n     * @returns {number}\n     */\n    CarouselComponent.prototype.getCurrentSlideIndex = function () {\n        return this._slides.findIndex(function (slide) { return slide.active; });\n    };\n    /**\n     * Defines, whether the specified index is last in collection\n     * @param index\n     * @returns {boolean}\n     */\n    CarouselComponent.prototype.isLast = function (index) {\n        return index + 1 >= this._slides.length;\n    };\n    /**\n     * Defines next slide index, depending of direction\n     * @param direction: Direction(UNKNOWN|PREV|NEXT)\n     * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n     *   return undefined if next slide require wrapping\n     * @returns {any}\n     */\n    CarouselComponent.prototype.findNextSlideIndex = function (direction, force) {\n        var nextSlideIndex = 0;\n        if (!force &&\n            (this.isLast(this.activeSlide) &&\n                direction !== Direction.PREV &&\n                this.noWrap)) {\n            return void 0;\n        }\n        switch (direction) {\n            case Direction.NEXT:\n                // if this is last slide, not force, looping is disabled\n                // and need to going forward - select current slide, as a next\n                nextSlideIndex = !this.isLast(this._currentActiveSlide)\n                    ? this._currentActiveSlide + 1\n                    : !force && this.noWrap ? this._currentActiveSlide : 0;\n                break;\n            case Direction.PREV:\n                // if this is first slide, not force, looping is disabled\n                // and need to going backward - select current slide, as a next\n                nextSlideIndex =\n                    this._currentActiveSlide > 0\n                        ? this._currentActiveSlide - 1\n                        : !force && this.noWrap\n                            ? this._currentActiveSlide\n                            : this._slides.length - 1;\n                break;\n            default:\n                throw new Error('Unknown direction');\n        }\n        return nextSlideIndex;\n    };\n    /**\n     * Sets a slide, which specified through index, as active\n     * @param index\n     * @private\n     */\n    CarouselComponent.prototype._select = function (index) {\n        if (isNaN(index)) {\n            this.pause();\n            return;\n        }\n        var currentSlide = this._slides.get(this._currentActiveSlide);\n        if (currentSlide) {\n            currentSlide.active = false;\n        }\n        var nextSlide = this._slides.get(index);\n        if (nextSlide) {\n            this._currentActiveSlide = index;\n            nextSlide.active = true;\n            this.activeSlide = index;\n            this.activeSlideChange.emit(index);\n        }\n    };\n    /**\n     * Starts loop of auto changing of slides\n     */\n    CarouselComponent.prototype.restartTimer = function () {\n        var _this = this;\n        this.resetTimer();\n        var interval = +this.interval;\n        if (!isNaN(interval) && interval > 0) {\n            this.currentInterval = this.ngZone.runOutsideAngular(function () {\n                return setInterval(function () {\n                    var nInterval = +_this.interval;\n                    _this.ngZone.run(function () {\n                        if (_this.isPlaying &&\n                            !isNaN(_this.interval) &&\n                            nInterval > 0 &&\n                            _this.slides.length) {\n                            _this.nextSlide();\n                        }\n                        else {\n                            _this.pause();\n                        }\n                    });\n                }, interval);\n            });\n        }\n    };\n    /**\n     * Stops loop of auto changing of slides\n     */\n    CarouselComponent.prototype.resetTimer = function () {\n        if (this.currentInterval) {\n            clearInterval(this.currentInterval);\n            this.currentInterval = void 0;\n        }\n    };\n    CarouselComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'carousel',\n                    template: \"<div (mouseenter)=\\\"pause()\\\" (mouseleave)=\\\"play()\\\" (mouseup)=\\\"play()\\\" class=\\\"carousel slide\\\"> <ol class=\\\"carousel-indicators\\\" *ngIf=\\\"showIndicators && slides.length > 1\\\"> <li *ngFor=\\\"let slidez of slides; let i = index;\\\" [class.active]=\\\"slidez.active === true\\\" (click)=\\\"selectSlide(i)\\\"></li> </ol> <div class=\\\"carousel-inner\\\"><ng-content></ng-content></div> <a class=\\\"left carousel-control carousel-control-prev\\\" [class.disabled]=\\\"activeSlide === 0 && noWrap\\\" (click)=\\\"previousSlide()\\\" *ngIf=\\\"slides.length > 1\\\"> <span class=\\\"icon-prev carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span> <span *ngIf=\\\"isBs4\\\" class=\\\"sr-only\\\">Previous</span> </a> <a class=\\\"right carousel-control carousel-control-next\\\" (click)=\\\"nextSlide()\\\"  [class.disabled]=\\\"isLast(activeSlide) && noWrap\\\" *ngIf=\\\"slides.length > 1\\\"> <span class=\\\"icon-next carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span> <span class=\\\"sr-only\\\">Next</span> </a> </div> \"\n                },] },\n    ];\n    /** @nocollapse */\n    CarouselComponent.ctorParameters = function () { return [\n        { type: CarouselConfig, },\n        { type: NgZone, },\n    ]; };\n    CarouselComponent.propDecorators = {\n        'noWrap': [{ type: Input },],\n        'noPause': [{ type: Input },],\n        'showIndicators': [{ type: Input },],\n        'activeSlideChange': [{ type: Output },],\n        'activeSlide': [{ type: Input },],\n        'interval': [{ type: Input },],\n    };\n    return CarouselComponent;\n}());\nexport { CarouselComponent };\n//# sourceMappingURL=carousel.component.js.map"]}]}
{"remainingRequest":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\progressbar\\progressbar.config.js","dependencies":[{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\progressbar\\progressbar.config.js","mtime":1614055096138},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1614055079483},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nvar ProgressbarConfig = /*@__PURE__*/ (function () {\n    function ProgressbarConfig() {\n        /** if `true` changing value of progress bar will be animated */\n        this.animate = false;\n        /** maximum total value of progress element */\n        this.max = 100;\n    }\n    return ProgressbarConfig;\n}());\nexport { ProgressbarConfig };\n\n\n\n",{"version":3,"file":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\progressbar\\progressbar.config.js.post-build-optimizer.js","sourceRoot":"","sources":["D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\progressbar\\progressbar.config.js.pre-build-optimizer.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,IAAI,iBAAiB,iBAAG,CAAC;IACrB;QACI,gEAAgE;QAChE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,8CAA8C;QAC9C,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC;IAMD,MAAM,CAAC,iBAAiB,CAAC;GAC1B,CAAC,CAAC;AACL,OAAO,EAAE,iBAAiB,EAAE,CAAC;AAC7B,8CAA8C","sourcesContent":["import { Injectable } from '@angular/core';\nvar ProgressbarConfig = (function () {\n    function ProgressbarConfig() {\n        /** if `true` changing value of progress bar will be animated */\n        this.animate = false;\n        /** maximum total value of progress element */\n        this.max = 100;\n    }\n    ProgressbarConfig.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ProgressbarConfig.ctorParameters = function () { return []; };\n    return ProgressbarConfig;\n}());\nexport { ProgressbarConfig };\n//# sourceMappingURL=progressbar.config.js.map"]}]}
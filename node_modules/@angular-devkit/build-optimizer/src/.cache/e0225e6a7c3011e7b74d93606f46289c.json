{"remainingRequest":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\typeahead\\typeahead.directive.js","dependencies":[{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\typeahead\\typeahead.directive.js","mtime":1614055103141},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1614055079483},{"path":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:max-file-line-count */\nimport { ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2, ViewContainerRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/toArray';\nimport { Observable } from 'rxjs/Observable';\nimport { ComponentLoaderFactory } from '../component-loader/index';\nimport { TypeaheadContainerComponent } from './typeahead-container.component';\nimport { TypeaheadMatch } from './typeahead-match.class';\nimport { getValueFromObject, latinize, tokenize } from './typeahead-utils';\nvar TypeaheadDirective = /*@__PURE__*/ (function () {\n    function TypeaheadDirective(ngControl, element, viewContainerRef, renderer, cis, changeDetection) {\n        this.ngControl = ngControl;\n        this.element = element;\n        this.renderer = renderer;\n        this.changeDetection = changeDetection;\n        /** minimal no of characters that needs to be entered before\n         * typeahead kicks-in. When set to 0, typeahead shows on focus with full\n         * list of options (limited as normal by typeaheadOptionsLimit)\n         */\n        this.typeaheadMinLength = void 0;\n        /** should be used only in case of typeahead attribute is array.\n         * If true - loading of options will be async, otherwise - sync.\n         * true make sense if options array is large.\n         */\n        this.typeaheadAsync = void 0;\n        /** match latin symbols.\n         * If true the word s√∫per would match super and vice versa.\n         */\n        this.typeaheadLatinize = true;\n        /** Can be use to search words by inserting a single white space between each characters\n         *  for example 'C a l i f o r n i a' will match 'California'.\n         */\n        this.typeaheadSingleWords = true;\n        /** should be used only in case typeaheadSingleWords attribute is true.\n         * Sets the word delimiter to break words. Defaults to space.\n         */\n        this.typeaheadWordDelimiters = ' ';\n        /** should be used only in case typeaheadSingleWords attribute is true.\n         * Sets the word delimiter to match exact phrase.\n         * Defaults to simple and double quotes.\n         */\n        this.typeaheadPhraseDelimiters = '\\'\"';\n        /** specifies if typeahead is scrollable  */\n        this.typeaheadScrollable = false;\n        /** specifies number of options to show in scroll view  */\n        this.typeaheadOptionsInScrollableView = 5;\n        /** fired when 'busy' state of this component was changed,\n         * fired on async mode only, returns boolean\n         */\n        this.typeaheadLoading = new EventEmitter();\n        /** fired on every key event and returns true\n         * in case of matches are not detected\n         */\n        this.typeaheadNoResults = new EventEmitter();\n        /** fired when option was selected, return object with data of this option */\n        this.typeaheadOnSelect = new EventEmitter();\n        /** fired when blur event occurres. returns the active item */\n        this.typeaheadOnBlur = new EventEmitter();\n        /** This attribute indicates that the dropdown should be opened upwards */\n        this.dropup = false;\n        this.isTypeaheadOptionsListActive = false;\n        this.keyUpEventEmitter = new EventEmitter();\n        this.placement = 'bottom-left';\n        this._subscriptions = [];\n        this._typeahead = cis.createLoader(element, viewContainerRef, renderer);\n    }\n    TypeaheadDirective.prototype.ngOnInit = function () {\n        this.typeaheadOptionsLimit = this.typeaheadOptionsLimit || 20;\n        this.typeaheadMinLength =\n            this.typeaheadMinLength === void 0 ? 1 : this.typeaheadMinLength;\n        this.typeaheadWaitMs = this.typeaheadWaitMs || 0;\n        // async should be false in case of array\n        if (this.typeaheadAsync === undefined &&\n            !(this.typeahead instanceof Observable)) {\n            this.typeaheadAsync = false;\n        }\n        if (this.typeahead instanceof Observable) {\n            this.typeaheadAsync = true;\n        }\n        if (this.typeaheadAsync) {\n            this.asyncActions();\n        }\n        else {\n            this.syncActions();\n        }\n    };\n    TypeaheadDirective.prototype.onInput = function (e) {\n        // For `<input>`s, use the `value` property. For others that don't have a\n        // `value` (such as `<span contenteditable=\"true\">`), use either\n        // `textContent` or `innerText` (depending on which one is supported, i.e.\n        // Firefox or IE).\n        var value = e.target.value !== undefined\n            ? e.target.value\n            : e.target.textContent !== undefined\n                ? e.target.textContent\n                : e.target.innerText;\n        if (value != null && value.trim().length >= this.typeaheadMinLength) {\n            this.typeaheadLoading.emit(true);\n            this.keyUpEventEmitter.emit(e.target.value);\n        }\n        else {\n            this.typeaheadLoading.emit(false);\n            this.typeaheadNoResults.emit(false);\n            this.hide();\n        }\n    };\n    TypeaheadDirective.prototype.onChange = function (e) {\n        if (this._container) {\n            // esc\n            if (e.keyCode === 27) {\n                this.hide();\n                return;\n            }\n            // up\n            if (e.keyCode === 38) {\n                this._container.prevActiveMatch();\n                return;\n            }\n            // down\n            if (e.keyCode === 40) {\n                this._container.nextActiveMatch();\n                return;\n            }\n            // enter, tab\n            if (e.keyCode === 13) {\n                this._container.selectActiveMatch();\n                return;\n            }\n        }\n    };\n    TypeaheadDirective.prototype.onFocus = function () {\n        if (this.typeaheadMinLength === 0) {\n            this.typeaheadLoading.emit(true);\n            this.keyUpEventEmitter.emit(this.element.nativeElement.value || '');\n        }\n    };\n    TypeaheadDirective.prototype.onBlur = function () {\n        if (this._container && !this._container.isFocused) {\n            this.typeaheadOnBlur.emit(this._container.active);\n        }\n    };\n    TypeaheadDirective.prototype.onKeydown = function (e) {\n        // no container - no problems\n        if (!this._container) {\n            return;\n        }\n        // if an item is visible - prevent form submission\n        if (e.keyCode === 13) {\n            e.preventDefault();\n            return;\n        }\n        // if an item is visible - don't change focus\n        if (e.keyCode === 9) {\n            e.preventDefault();\n            this._container.selectActiveMatch();\n            return;\n        }\n    };\n    TypeaheadDirective.prototype.changeModel = function (match) {\n        var valueStr = match.value;\n        this.ngControl.viewToModelUpdate(valueStr);\n        (this.ngControl.control).setValue(valueStr);\n        this.changeDetection.markForCheck();\n        this.hide();\n    };\n    Object.defineProperty(TypeaheadDirective.prototype, \"matches\", {\n        get: function () {\n            return this._matches;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TypeaheadDirective.prototype.show = function () {\n        var _this = this;\n        this._typeahead\n            .attach(TypeaheadContainerComponent)\n            .to(this.container)\n            .position({ attachment: (this.dropup ? 'top' : 'bottom') + \" left\" })\n            .show({\n            typeaheadRef: this,\n            placement: this.placement,\n            animation: false,\n            dropup: this.dropup\n        });\n        this._outsideClickListener = this.renderer.listen('document', 'click', function (e) {\n            if (_this.typeaheadMinLength === 0 && _this.element.nativeElement.contains(e.target)) {\n                return;\n            }\n            _this.onOutsideClick();\n        });\n        this._container = this._typeahead.instance;\n        this._container.parent = this;\n        // This improves the speed as it won't have to be done for each list item\n        var normalizedQuery = (this.typeaheadLatinize\n            ? latinize(this.ngControl.control.value)\n            : this.ngControl.control.value)\n            .toString()\n            .toLowerCase();\n        this._container.query = this.typeaheadSingleWords\n            ? tokenize(normalizedQuery, this.typeaheadWordDelimiters, this.typeaheadPhraseDelimiters)\n            : normalizedQuery;\n        this._container.matches = this._matches;\n        this.element.nativeElement.focus();\n    };\n    TypeaheadDirective.prototype.hide = function () {\n        if (this._typeahead.isShown) {\n            this._typeahead.hide();\n            this._outsideClickListener();\n            this._container = null;\n        }\n    };\n    TypeaheadDirective.prototype.onOutsideClick = function () {\n        if (this._container && !this._container.isFocused) {\n            this.hide();\n        }\n    };\n    TypeaheadDirective.prototype.ngOnDestroy = function () {\n        // clean up subscriptions\n        for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {\n            var sub = _a[_i];\n            sub.unsubscribe();\n        }\n        this._typeahead.dispose();\n    };\n    TypeaheadDirective.prototype.asyncActions = function () {\n        var _this = this;\n        this._subscriptions.push(this.keyUpEventEmitter\n            .debounceTime(this.typeaheadWaitMs)\n            .switchMap(function () { return _this.typeahead; })\n            .subscribe(function (matches) {\n            _this.finalizeAsyncCall(matches);\n        }));\n    };\n    TypeaheadDirective.prototype.syncActions = function () {\n        var _this = this;\n        this._subscriptions.push(this.keyUpEventEmitter\n            .debounceTime(this.typeaheadWaitMs)\n            .mergeMap(function (value) {\n            var normalizedQuery = _this.normalizeQuery(value);\n            return Observable.from(_this.typeahead)\n                .filter(function (option) {\n                return (option &&\n                    _this.testMatch(_this.normalizeOption(option), normalizedQuery));\n            })\n                .toArray();\n        })\n            .subscribe(function (matches) {\n            _this.finalizeAsyncCall(matches);\n        }));\n    };\n    TypeaheadDirective.prototype.normalizeOption = function (option) {\n        var optionValue = getValueFromObject(option, this.typeaheadOptionField);\n        var normalizedOption = this.typeaheadLatinize\n            ? latinize(optionValue)\n            : optionValue;\n        return normalizedOption.toLowerCase();\n    };\n    TypeaheadDirective.prototype.normalizeQuery = function (value) {\n        // If singleWords, break model here to not be doing extra work on each\n        // iteration\n        var normalizedQuery = (this.typeaheadLatinize\n            ? latinize(value)\n            : value)\n            .toString()\n            .toLowerCase();\n        normalizedQuery = this.typeaheadSingleWords\n            ? tokenize(normalizedQuery, this.typeaheadWordDelimiters, this.typeaheadPhraseDelimiters)\n            : normalizedQuery;\n        return normalizedQuery;\n    };\n    TypeaheadDirective.prototype.testMatch = function (match, test) {\n        var spaceLength;\n        if (typeof test === 'object') {\n            spaceLength = test.length;\n            for (var i = 0; i < spaceLength; i += 1) {\n                if (test[i].length > 0 && match.indexOf(test[i]) < 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return match.indexOf(test) >= 0;\n    };\n    TypeaheadDirective.prototype.finalizeAsyncCall = function (matches) {\n        this.prepareMatches(matches);\n        this.typeaheadLoading.emit(false);\n        this.typeaheadNoResults.emit(!this.hasMatches());\n        if (!this.hasMatches()) {\n            this.hide();\n            return;\n        }\n        if (this._container) {\n            // This improves the speed as it won't have to be done for each list item\n            var normalizedQuery = (this.typeaheadLatinize\n                ? latinize(this.ngControl.control.value)\n                : this.ngControl.control.value)\n                .toString()\n                .toLowerCase();\n            this._container.query = this.typeaheadSingleWords\n                ? tokenize(normalizedQuery, this.typeaheadWordDelimiters, this.typeaheadPhraseDelimiters)\n                : normalizedQuery;\n            this._container.matches = this._matches;\n        }\n        else {\n            this.show();\n        }\n    };\n    TypeaheadDirective.prototype.prepareMatches = function (options) {\n        var _this = this;\n        var limited = options.slice(0, this.typeaheadOptionsLimit);\n        if (this.typeaheadGroupField) {\n            var matches_1 = [];\n            // extract all group names\n            var groups = limited\n                .map(function (option) {\n                return getValueFromObject(option, _this.typeaheadGroupField);\n            })\n                .filter(function (v, i, a) { return a.indexOf(v) === i; });\n            groups.forEach(function (group) {\n                // add group header to array of matches\n                matches_1.push(new TypeaheadMatch(group, group, true));\n                // add each item of group to array of matches\n                matches_1 = matches_1.concat(limited\n                    .filter(function (option) {\n                    return getValueFromObject(option, _this.typeaheadGroupField) === group;\n                })\n                    .map(function (option) {\n                    return new TypeaheadMatch(option, getValueFromObject(option, _this.typeaheadOptionField));\n                }));\n            });\n            this._matches = matches_1;\n        }\n        else {\n            this._matches = limited.map(function (option) {\n                return new TypeaheadMatch(option, getValueFromObject(option, _this.typeaheadOptionField));\n            });\n        }\n    };\n    TypeaheadDirective.prototype.hasMatches = function () {\n        return this._matches.length > 0;\n    };\n    return TypeaheadDirective;\n}());\nexport { TypeaheadDirective };\n\n\n\n",{"version":3,"file":"D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\typeahead\\typeahead.directive.js.post-build-optimizer.js","sourceRoot":"","sources":["D:\\Code MWSC\\2020-MWSC-Github\\webapps\\node_modules\\ngx-bootstrap\\typeahead\\typeahead.directive.js.pre-build-optimizer.js"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:max-file-line-count */\nimport { ChangeDetectorRef, Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2, ViewContainerRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/toArray';\nimport { Observable } from 'rxjs/Observable';\nimport { ComponentLoaderFactory } from '../component-loader/index';\nimport { TypeaheadContainerComponent } from './typeahead-container.component';\nimport { TypeaheadMatch } from './typeahead-match.class';\nimport { getValueFromObject, latinize, tokenize } from './typeahead-utils';\nvar TypeaheadDirective = (function () {\n    function TypeaheadDirective(ngControl, element, viewContainerRef, renderer, cis, changeDetection) {\n        this.ngControl = ngControl;\n        this.element = element;\n        this.renderer = renderer;\n        this.changeDetection = changeDetection;\n        /** minimal no of characters that needs to be entered before\n         * typeahead kicks-in. When set to 0, typeahead shows on focus with full\n         * list of options (limited as normal by typeaheadOptionsLimit)\n         */\n        this.typeaheadMinLength = void 0;\n        /** should be used only in case of typeahead attribute is array.\n         * If true - loading of options will be async, otherwise - sync.\n         * true make sense if options array is large.\n         */\n        this.typeaheadAsync = void 0;\n        /** match latin symbols.\n         * If true the word s√∫per would match super and vice versa.\n         */\n        this.typeaheadLatinize = true;\n        /** Can be use to search words by inserting a single white space between each characters\n         *  for example 'C a l i f o r n i a' will match 'California'.\n         */\n        this.typeaheadSingleWords = true;\n        /** should be used only in case typeaheadSingleWords attribute is true.\n         * Sets the word delimiter to break words. Defaults to space.\n         */\n        this.typeaheadWordDelimiters = ' ';\n        /** should be used only in case typeaheadSingleWords attribute is true.\n         * Sets the word delimiter to match exact phrase.\n         * Defaults to simple and double quotes.\n         */\n        this.typeaheadPhraseDelimiters = '\\'\"';\n        /** specifies if typeahead is scrollable  */\n        this.typeaheadScrollable = false;\n        /** specifies number of options to show in scroll view  */\n        this.typeaheadOptionsInScrollableView = 5;\n        /** fired when 'busy' state of this component was changed,\n         * fired on async mode only, returns boolean\n         */\n        this.typeaheadLoading = new EventEmitter();\n        /** fired on every key event and returns true\n         * in case of matches are not detected\n         */\n        this.typeaheadNoResults = new EventEmitter();\n        /** fired when option was selected, return object with data of this option */\n        this.typeaheadOnSelect = new EventEmitter();\n        /** fired when blur event occurres. returns the active item */\n        this.typeaheadOnBlur = new EventEmitter();\n        /** This attribute indicates that the dropdown should be opened upwards */\n        this.dropup = false;\n        this.isTypeaheadOptionsListActive = false;\n        this.keyUpEventEmitter = new EventEmitter();\n        this.placement = 'bottom-left';\n        this._subscriptions = [];\n        this._typeahead = cis.createLoader(element, viewContainerRef, renderer);\n    }\n    TypeaheadDirective.prototype.ngOnInit = function () {\n        this.typeaheadOptionsLimit = this.typeaheadOptionsLimit || 20;\n        this.typeaheadMinLength =\n            this.typeaheadMinLength === void 0 ? 1 : this.typeaheadMinLength;\n        this.typeaheadWaitMs = this.typeaheadWaitMs || 0;\n        // async should be false in case of array\n        if (this.typeaheadAsync === undefined &&\n            !(this.typeahead instanceof Observable)) {\n            this.typeaheadAsync = false;\n        }\n        if (this.typeahead instanceof Observable) {\n            this.typeaheadAsync = true;\n        }\n        if (this.typeaheadAsync) {\n            this.asyncActions();\n        }\n        else {\n            this.syncActions();\n        }\n    };\n    TypeaheadDirective.prototype.onInput = function (e) {\n        // For `<input>`s, use the `value` property. For others that don't have a\n        // `value` (such as `<span contenteditable=\"true\">`), use either\n        // `textContent` or `innerText` (depending on which one is supported, i.e.\n        // Firefox or IE).\n        var value = e.target.value !== undefined\n            ? e.target.value\n            : e.target.textContent !== undefined\n                ? e.target.textContent\n                : e.target.innerText;\n        if (value != null && value.trim().length >= this.typeaheadMinLength) {\n            this.typeaheadLoading.emit(true);\n            this.keyUpEventEmitter.emit(e.target.value);\n        }\n        else {\n            this.typeaheadLoading.emit(false);\n            this.typeaheadNoResults.emit(false);\n            this.hide();\n        }\n    };\n    TypeaheadDirective.prototype.onChange = function (e) {\n        if (this._container) {\n            // esc\n            if (e.keyCode === 27) {\n                this.hide();\n                return;\n            }\n            // up\n            if (e.keyCode === 38) {\n                this._container.prevActiveMatch();\n                return;\n            }\n            // down\n            if (e.keyCode === 40) {\n                this._container.nextActiveMatch();\n                return;\n            }\n            // enter, tab\n            if (e.keyCode === 13) {\n                this._container.selectActiveMatch();\n                return;\n            }\n        }\n    };\n    TypeaheadDirective.prototype.onFocus = function () {\n        if (this.typeaheadMinLength === 0) {\n            this.typeaheadLoading.emit(true);\n            this.keyUpEventEmitter.emit(this.element.nativeElement.value || '');\n        }\n    };\n    TypeaheadDirective.prototype.onBlur = function () {\n        if (this._container && !this._container.isFocused) {\n            this.typeaheadOnBlur.emit(this._container.active);\n        }\n    };\n    TypeaheadDirective.prototype.onKeydown = function (e) {\n        // no container - no problems\n        if (!this._container) {\n            return;\n        }\n        // if an item is visible - prevent form submission\n        if (e.keyCode === 13) {\n            e.preventDefault();\n            return;\n        }\n        // if an item is visible - don't change focus\n        if (e.keyCode === 9) {\n            e.preventDefault();\n            this._container.selectActiveMatch();\n            return;\n        }\n    };\n    TypeaheadDirective.prototype.changeModel = function (match) {\n        var valueStr = match.value;\n        this.ngControl.viewToModelUpdate(valueStr);\n        (this.ngControl.control).setValue(valueStr);\n        this.changeDetection.markForCheck();\n        this.hide();\n    };\n    Object.defineProperty(TypeaheadDirective.prototype, \"matches\", {\n        get: function () {\n            return this._matches;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TypeaheadDirective.prototype.show = function () {\n        var _this = this;\n        this._typeahead\n            .attach(TypeaheadContainerComponent)\n            .to(this.container)\n            .position({ attachment: (this.dropup ? 'top' : 'bottom') + \" left\" })\n            .show({\n            typeaheadRef: this,\n            placement: this.placement,\n            animation: false,\n            dropup: this.dropup\n        });\n        this._outsideClickListener = this.renderer.listen('document', 'click', function (e) {\n            if (_this.typeaheadMinLength === 0 && _this.element.nativeElement.contains(e.target)) {\n                return;\n            }\n            _this.onOutsideClick();\n        });\n        this._container = this._typeahead.instance;\n        this._container.parent = this;\n        // This improves the speed as it won't have to be done for each list item\n        var normalizedQuery = (this.typeaheadLatinize\n            ? latinize(this.ngControl.control.value)\n            : this.ngControl.control.value)\n            .toString()\n            .toLowerCase();\n        this._container.query = this.typeaheadSingleWords\n            ? tokenize(normalizedQuery, this.typeaheadWordDelimiters, this.typeaheadPhraseDelimiters)\n            : normalizedQuery;\n        this._container.matches = this._matches;\n        this.element.nativeElement.focus();\n    };\n    TypeaheadDirective.prototype.hide = function () {\n        if (this._typeahead.isShown) {\n            this._typeahead.hide();\n            this._outsideClickListener();\n            this._container = null;\n        }\n    };\n    TypeaheadDirective.prototype.onOutsideClick = function () {\n        if (this._container && !this._container.isFocused) {\n            this.hide();\n        }\n    };\n    TypeaheadDirective.prototype.ngOnDestroy = function () {\n        // clean up subscriptions\n        for (var _i = 0, _a = this._subscriptions; _i < _a.length; _i++) {\n            var sub = _a[_i];\n            sub.unsubscribe();\n        }\n        this._typeahead.dispose();\n    };\n    TypeaheadDirective.prototype.asyncActions = function () {\n        var _this = this;\n        this._subscriptions.push(this.keyUpEventEmitter\n            .debounceTime(this.typeaheadWaitMs)\n            .switchMap(function () { return _this.typeahead; })\n            .subscribe(function (matches) {\n            _this.finalizeAsyncCall(matches);\n        }));\n    };\n    TypeaheadDirective.prototype.syncActions = function () {\n        var _this = this;\n        this._subscriptions.push(this.keyUpEventEmitter\n            .debounceTime(this.typeaheadWaitMs)\n            .mergeMap(function (value) {\n            var normalizedQuery = _this.normalizeQuery(value);\n            return Observable.from(_this.typeahead)\n                .filter(function (option) {\n                return (option &&\n                    _this.testMatch(_this.normalizeOption(option), normalizedQuery));\n            })\n                .toArray();\n        })\n            .subscribe(function (matches) {\n            _this.finalizeAsyncCall(matches);\n        }));\n    };\n    TypeaheadDirective.prototype.normalizeOption = function (option) {\n        var optionValue = getValueFromObject(option, this.typeaheadOptionField);\n        var normalizedOption = this.typeaheadLatinize\n            ? latinize(optionValue)\n            : optionValue;\n        return normalizedOption.toLowerCase();\n    };\n    TypeaheadDirective.prototype.normalizeQuery = function (value) {\n        // If singleWords, break model here to not be doing extra work on each\n        // iteration\n        var normalizedQuery = (this.typeaheadLatinize\n            ? latinize(value)\n            : value)\n            .toString()\n            .toLowerCase();\n        normalizedQuery = this.typeaheadSingleWords\n            ? tokenize(normalizedQuery, this.typeaheadWordDelimiters, this.typeaheadPhraseDelimiters)\n            : normalizedQuery;\n        return normalizedQuery;\n    };\n    TypeaheadDirective.prototype.testMatch = function (match, test) {\n        var spaceLength;\n        if (typeof test === 'object') {\n            spaceLength = test.length;\n            for (var i = 0; i < spaceLength; i += 1) {\n                if (test[i].length > 0 && match.indexOf(test[i]) < 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return match.indexOf(test) >= 0;\n    };\n    TypeaheadDirective.prototype.finalizeAsyncCall = function (matches) {\n        this.prepareMatches(matches);\n        this.typeaheadLoading.emit(false);\n        this.typeaheadNoResults.emit(!this.hasMatches());\n        if (!this.hasMatches()) {\n            this.hide();\n            return;\n        }\n        if (this._container) {\n            // This improves the speed as it won't have to be done for each list item\n            var normalizedQuery = (this.typeaheadLatinize\n                ? latinize(this.ngControl.control.value)\n                : this.ngControl.control.value)\n                .toString()\n                .toLowerCase();\n            this._container.query = this.typeaheadSingleWords\n                ? tokenize(normalizedQuery, this.typeaheadWordDelimiters, this.typeaheadPhraseDelimiters)\n                : normalizedQuery;\n            this._container.matches = this._matches;\n        }\n        else {\n            this.show();\n        }\n    };\n    TypeaheadDirective.prototype.prepareMatches = function (options) {\n        var _this = this;\n        var limited = options.slice(0, this.typeaheadOptionsLimit);\n        if (this.typeaheadGroupField) {\n            var matches_1 = [];\n            // extract all group names\n            var groups = limited\n                .map(function (option) {\n                return getValueFromObject(option, _this.typeaheadGroupField);\n            })\n                .filter(function (v, i, a) { return a.indexOf(v) === i; });\n            groups.forEach(function (group) {\n                // add group header to array of matches\n                matches_1.push(new TypeaheadMatch(group, group, true));\n                // add each item of group to array of matches\n                matches_1 = matches_1.concat(limited\n                    .filter(function (option) {\n                    return getValueFromObject(option, _this.typeaheadGroupField) === group;\n                })\n                    .map(function (option) {\n                    return new TypeaheadMatch(option, getValueFromObject(option, _this.typeaheadOptionField));\n                }));\n            });\n            this._matches = matches_1;\n        }\n        else {\n            this._matches = limited.map(function (option) {\n                return new TypeaheadMatch(option, getValueFromObject(option, _this.typeaheadOptionField));\n            });\n        }\n    };\n    TypeaheadDirective.prototype.hasMatches = function () {\n        return this._matches.length > 0;\n    };\n    TypeaheadDirective.decorators = [\n        { type: Directive, args: [{ selector: '[typeahead]', exportAs: 'bs-typeahead' },] },\n    ];\n    /** @nocollapse */\n    TypeaheadDirective.ctorParameters = function () { return [\n        { type: NgControl, },\n        { type: ElementRef, },\n        { type: ViewContainerRef, },\n        { type: Renderer2, },\n        { type: ComponentLoaderFactory, },\n        { type: ChangeDetectorRef, },\n    ]; };\n    TypeaheadDirective.propDecorators = {\n        'typeahead': [{ type: Input },],\n        'typeaheadMinLength': [{ type: Input },],\n        'typeaheadWaitMs': [{ type: Input },],\n        'typeaheadOptionsLimit': [{ type: Input },],\n        'typeaheadOptionField': [{ type: Input },],\n        'typeaheadGroupField': [{ type: Input },],\n        'typeaheadAsync': [{ type: Input },],\n        'typeaheadLatinize': [{ type: Input },],\n        'typeaheadSingleWords': [{ type: Input },],\n        'typeaheadWordDelimiters': [{ type: Input },],\n        'typeaheadPhraseDelimiters': [{ type: Input },],\n        'typeaheadItemTemplate': [{ type: Input },],\n        'optionsListTemplate': [{ type: Input },],\n        'typeaheadScrollable': [{ type: Input },],\n        'typeaheadOptionsInScrollableView': [{ type: Input },],\n        'typeaheadLoading': [{ type: Output },],\n        'typeaheadNoResults': [{ type: Output },],\n        'typeaheadOnSelect': [{ type: Output },],\n        'typeaheadOnBlur': [{ type: Output },],\n        'container': [{ type: Input },],\n        'dropup': [{ type: Input },],\n        'onInput': [{ type: HostListener, args: ['input', ['$event'],] },],\n        'onChange': [{ type: HostListener, args: ['keyup', ['$event'],] },],\n        'onFocus': [{ type: HostListener, args: ['click',] }, { type: HostListener, args: ['focus',] },],\n        'onBlur': [{ type: HostListener, args: ['blur',] },],\n        'onKeydown': [{ type: HostListener, args: ['keydown', ['$event'],] },],\n    };\n    return TypeaheadDirective;\n}());\nexport { TypeaheadDirective };\n//# sourceMappingURL=typeahead.directive.js.map"]}]}